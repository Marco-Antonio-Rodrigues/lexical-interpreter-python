
Expressões Aritméticas: 

x = 5 + 3 * 2;

<Stmt> ::= <ID> ASSIGN <Exp> SEMICOLON?
<Stmt> ::= x ASSIGN <Exp> SEMICOLON?
<Stmt> ::= x = <Term> PLUS <Term> SEMICOLON?
<Stmt> ::= x = <Factor> PLUS <Term> SEMICOLON?
<Stmt> ::= x = <Atom> PLUS <Term> SEMICOLON?
<Stmt> ::= x = INT PLUS <Term> SEMICOLON?
<Stmt> ::= x = 5 PLUS <Term> SEMICOLON?
<Stmt> ::= x = 5 + <Term> SEMICOLON?
<Stmt> ::= x = 5 + <Factor> MUL <Factor> SEMICOLON?
<Stmt> ::= x = 5 + <Atom> MUL <Factor> SEMICOLON?
<Stmt> ::= x = 5 + INT MUL <Factor> SEMICOLON?
<Stmt> ::= x = 5 + 3 MUL <Factor> SEMICOLON?
<Stmt> ::= x = 5 + 3 * <Factor> SEMICOLON?
<Stmt> ::= x = 5 + 3 * <Atom> SEMICOLON?
<Stmt> ::= x = 5 + 3 * INT SEMICOLON?
<Stmt> ::= x = 5 + 3 * 2 SEMICOLON?
<Stmt> ::= x = 5 + 3 * 2 ;

Expressões Relacionais:

if (x > 10) {
    y = 1;
} else {
    y = 0;
}

<Stmt> ::= IF LPAR <RelExp> RPAR LBRACE <StmtList> RBRACE (ELSE LBRACE <StmtList> RBRACE)? SEMICOLON?
<Stmt> ::= if LPAR <RelExp> RPAR LBRACE <StmtList> RBRACE (ELSE LBRACE <StmtList> RBRACE)? SEMICOLON?
<Stmt> ::= if ( <RelExp> ) LBRACE <StmtList> RBRACE (ELSE LBRACE <StmtList> RBRACE)? SEMICOLON?
<Stmt> ::= if ( <Term> GT <Term> ) LBRACE <StmtList> RBRACE (ELSE LBRACE <StmtList> RBRACE)? SEMICOLON?
<Stmt> ::= if ( <Factor> GT <Term> ) LBRACE <StmtList> RBRACE (ELSE LBRACE <StmtList> RBRACE)? SEMICOLON?
<Stmt> ::= if ( <Atom> GT <Term> ) LBRACE <StmtList> RBRACE (ELSE LBRACE <StmtList> RBRACE)? SEMICOLON?
<Stmt> ::= if ( <ID> GT <Term> ) LBRACE <StmtList> RBRACE (ELSE LBRACE <StmtList> RBRACE)? SEMICOLON?
<Stmt> ::= if ( x GT <Term> ) LBRACE <StmtList> RBRACE (ELSE LBRACE <StmtList> RBRACE)? SEMICOLON?
<Stmt> ::= if ( x > <Term> ) LBRACE <StmtList> RBRACE (ELSE LBRACE <StmtList> RBRACE)? SEMICOLON?
<Stmt> ::= if ( x > <Factor> ) LBRACE <StmtList> RBRACE (ELSE LBRACE <StmtList> RBRACE)? SEMICOLON?
<Stmt> ::= if ( x > <Atom> ) LBRACE <StmtList> RBRACE (ELSE LBRACE <StmtList> RBRACE)? SEMICOLON?
<Stmt> ::= if ( x > INT ) LBRACE <StmtList> RBRACE (ELSE LBRACE <StmtList> RBRACE)? SEMICOLON?
<Stmt> ::= if ( x > 10 ) LBRACE <StmtList> RBRACE (ELSE LBRACE <StmtList> RBRACE)? SEMICOLON?
<Stmt> ::= if ( x > 10 ) { <StmtList> } (ELSE LBRACE <StmtList> RBRACE)? SEMICOLON?
<Stmt> ::= if ( x > 10 ) { <Stmt>+ } (ELSE LBRACE <StmtList> RBRACE)? SEMICOLON?
<Stmt> ::= if ( x > 10 ) { <ID> ASSIGN <Exp> SEMICOLON? } (ELSE LBRACE <StmtList> RBRACE)? SEMICOLON?
<Stmt> ::= if ( x > 10 ) { y ASSIGN <Exp> SEMICOLON? } (ELSE LBRACE <StmtList> RBRACE)? SEMICOLON?
<Stmt> ::= if ( x > 10 ) { y = <Exp> SEMICOLON? } (ELSE LBRACE <StmtList> RBRACE)? SEMICOLON?
<Stmt> ::= if ( x > 10 ) { y = <Term> SEMICOLON? } (ELSE LBRACE <StmtList> RBRACE)? SEMICOLON?
<Stmt> ::= if ( x > 10 ) { y = <Factor> SEMICOLON? } (ELSE LBRACE <StmtList> RBRACE)? SEMICOLON?
<Stmt> ::= if ( x > 10 ) { y = <Atom> SEMICOLON? } (ELSE LBRACE <StmtList> RBRACE)? SEMICOLON?
<Stmt> ::= if ( x > 10 ) { y = INT SEMICOLON? } (ELSE LBRACE <StmtList> RBRACE)? SEMICOLON?
<Stmt> ::= if ( x > 10 ) { y = 1 SEMICOLON? } (ELSE LBRACE <StmtList> RBRACE)? SEMICOLON?
<Stmt> ::= if ( x > 10 ) { y = 1 ; } (ELSE LBRACE <StmtList> RBRACE)? SEMICOLON?
<Stmt> ::= if ( x > 10 ) { y = 1 ; } ELSE LBRACE <StmtList> RBRACE SEMICOLON?
<Stmt> ::= if ( x > 10 ) { y = 1 ; } else LBRACE <StmtList> RBRACE SEMICOLON?
<Stmt> ::= if ( x > 10 ) { y = 1 ; } else { <StmtList> } SEMICOLON?
<Stmt> ::= if ( x > 10 ) { y = 1 ; } else { <Stmt>+ } SEMICOLON?
<Stmt> ::= if ( x > 10 ) { y = 1 ; } else { <ID> ASSIGN <Exp> SEMICOLON? } SEMICOLON?
<Stmt> ::= if ( x > 10 ) { y = 1 ; } else { y ASSIGN <Exp> SEMICOLON? } SEMICOLON?
<Stmt> ::= if ( x > 10 ) { y = 1 ; } else { y = <Exp> SEMICOLON? } SEMICOLON?
<Stmt> ::= if ( x > 10 ) { y = 1 ; } else { y = <Term> SEMICOLON? } SEMICOLON?
<Stmt> ::= if ( x > 10 ) { y = 1 ; } else { y = <Factor> SEMICOLON? } SEMICOLON?
<Stmt> ::= if ( x > 10 ) { y = 1 ; } else { y = <Atom> SEMICOLON? } SEMICOLON?
<Stmt> ::= if ( x > 10 ) { y = 1 ; } else { y = INT SEMICOLON? } SEMICOLON?
<Stmt> ::= if ( x > 10 ) { y = 1 ; } else { y = 0 SEMICOLON? } SEMICOLON?
<Stmt> ::= if ( x > 10 ) { y = 1 ; } else { y = 0 ; } SEMICOLON?
<Stmt> ::= if ( x > 10 ) { y = 1 ; } else { y = 0 ; } 

Funções Matemáticas:

z = sin(x) + log(y);

<Stmt> ::= <ID> ASSIGN <Exp> SEMICOLON?
<Stmt> ::= z ASSIGN <Exp> SEMICOLON?
<Stmt> ::= z = <Exp> SEMICOLON?
<Stmt> ::= z = <Term> PLUS <Term> SEMICOLON?
<Stmt> ::= z = <Factor> PLUS <Term> SEMICOLON?
<Stmt> ::= z = <Atom> PLUS <Term> SEMICOLON?
<Stmt> ::= z = <FUNC> LPAR <ExpSequence> RPAR PLUS <Term> SEMICOLON?
<Stmt> ::= z = sin LPAR <ExpSequence> RPAR PLUS <Term> SEMICOLON?
<Stmt> ::= z = sin ( <ExpSequence> ) PLUS <Term> SEMICOLON?
<Stmt> ::= z = sin ( <Exp> ) PLUS <Term> SEMICOLON?
<Stmt> ::= z = sin ( <Term> ) PLUS <Term> SEMICOLON?
<Stmt> ::= z = sin ( <Factor> ) PLUS <Term> SEMICOLON?
<Stmt> ::= z = sin ( <Atom> ) PLUS <Term> SEMICOLON?
<Stmt> ::= z = sin ( <ID> ) PLUS <Term> SEMICOLON?
<Stmt> ::= z = sin ( x ) PLUS <Term> SEMICOLON?
<Stmt> ::= z = sin ( x ) + <Term> SEMICOLON?
<Stmt> ::= z = sin ( x ) + <Atom> SEMICOLON?
<Stmt> ::= z = sin ( x ) + <FUNC> LPAR <ExpSequence> RPAR SEMICOLON?
<Stmt> ::= z = sin ( x ) + log LPAR <ExpSequence> RPAR SEMICOLON?
<Stmt> ::= z = sin ( x ) + log ( <ExpSequence> ) SEMICOLON?
<Stmt> ::= z = sin ( x ) + log ( <Exp> ) SEMICOLON?
<Stmt> ::= z = sin ( x ) + log ( <Term> ) SEMICOLON?
<Stmt> ::= z = sin ( x ) + log ( <Factor> ) SEMICOLON?
<Stmt> ::= z = sin ( x ) + log ( <Atom> ) SEMICOLON?
<Stmt> ::= z = sin ( x ) + log ( <ID> ) SEMICOLON?
<Stmt> ::= z = sin ( x ) + log ( y ) SEMICOLON?
<Stmt> ::= z = sin ( x ) + log ( y ) ;

Listas e Tuplas de Expressões:

w = [3 + 4, 5 * 2];

<Stmt> ::= <ID> ASSIGN <Exp> SEMICOLON?
<Stmt> ::= w ASSIGN <Exp> SEMICOLON?
<Stmt> ::= w = <Exp> SEMICOLON?
<Stmt> ::= w = <Term> SEMICOLON?
<Stmt> ::= w = <Factor> SEMICOLON?
<Stmt> ::= w = <Atom> SEMICOLON?
<Stmt> ::= w = LBRACK <ExpSequence> RBRACK SEMICOLON?
<Stmt> ::= w = [ <ExpSequence> ] SEMICOLON?
<Stmt> ::= w = [ <Exp> COMMA <Exp> ] SEMICOLON?
<Stmt> ::= w = [ <Term> PLUS <Term> COMMA <Exp> ] SEMICOLON?
<Stmt> ::= w = [ <Factor> PLUS <Term> COMMA <Exp> ] SEMICOLON?
<Stmt> ::= w = [ <Atom> PLUS <Term> COMMA <Exp> ] SEMICOLON?
<Stmt> ::= w = [ INT PLUS <Term> COMMA <Exp> ] SEMICOLON?
<Stmt> ::= w = [ 3 PLUS <Term> COMMA <Exp> ] SEMICOLON?
<Stmt> ::= w = [ 3 + <Term> COMMA <Exp> ] SEMICOLON?
<Stmt> ::= w = [ 3 + <Factor> COMMA <Exp> ] SEMICOLON?
<Stmt> ::= w = [ 3 + <Atom> COMMA <Exp> ] SEMICOLON?
<Stmt> ::= w = [ 3 + INT COMMA <Exp> ] SEMICOLON?
<Stmt> ::= w = [ 3 + 4 COMMA <Exp> ] SEMICOLON?
<Stmt> ::= w = [ 3 + 4 , <Exp> ] SEMICOLON?
<Stmt> ::= w = [ 3 + 4 , <Factor> MUL <Factor> ] SEMICOLON?
<Stmt> ::= w = [ 3 + 4 , <Atom> MUL <Factor> ] SEMICOLON?
<Stmt> ::= w = [ 3 + 4 , INT MUL <Factor> ] SEMICOLON?
<Stmt> ::= w = [ 3 + 4 , 5 MUL <Factor> ] SEMICOLON?
<Stmt> ::= w = [ 3 + 4 , 5 * <Factor> ] SEMICOLON?
<Stmt> ::= w = [ 3 + 4 , 5 * <Atom> ] SEMICOLON?
<Stmt> ::= w = [ 3 + 4 , 5 * INT ] SEMICOLON?
<Stmt> ::= w = [ 3 + 4 , 5 * 2 ] SEMICOLON?
<Stmt> ::= w = [ 3 + 4 , 5 * 2 ] SEMICOLON?
<Stmt> ::= w = [ 3 + 4 , 5 * 2 ] ;


z = (sin(x), cos(y));

<Stmt> ::= <ID> ASSIGN <Exp> SEMICOLON?
<Stmt> ::= z ASSIGN <Exp> SEMICOLON?
<Stmt> ::= z = <Exp> SEMICOLON?
<Stmt> ::= z = <Term> SEMICOLON?
<Stmt> ::= z = <Factor> SEMICOLON?
<Stmt> ::= z = <Atom> SEMICOLON?
<Stmt> ::= z = LPAR <ExpSequence> RPAR SEMICOLON?
<Stmt> ::= z = ( <ExpSequence> ) SEMICOLON?
<Stmt> ::= z = ( <Exp> COMMA <Exp> ) SEMICOLON?
<Stmt> ::= z = ( <Term> COMMA <Exp> ) SEMICOLON?
<Stmt> ::= z = ( <Factor> COMMA <Exp> ) SEMICOLON?
<Stmt> ::= z = ( <Atom> COMMA <Exp> ) SEMICOLON?
<Stmt> ::= z = ( <FUNC> LPAR <ExpSequence> RPAR COMMA <Exp> ) SEMICOLON?
<Stmt> ::= z = ( sin LPAR <ExpSequence> RPAR COMMA <Exp> ) SEMICOLON?
<Stmt> ::= z = ( sin ( <ExpSequence> ) COMMA <Exp> ) SEMICOLON?
<Stmt> ::= z = ( sin ( <Exp> ) COMMA <Exp> ) SEMICOLON?
<Stmt> ::= z = ( sin ( <Term> ) COMMA <Exp> ) SEMICOLON?
<Stmt> ::= z = ( sin ( <Factor> ) COMMA <Exp> ) SEMICOLON?
<Stmt> ::= z = ( sin ( <Atom> ) COMMA <Exp> ) SEMICOLON?
<Stmt> ::= z = ( sin ( <ID> ) COMMA <Exp> ) SEMICOLON?
<Stmt> ::= z = ( sin ( x ) COMMA <Exp> ) SEMICOLON?
<Stmt> ::= z = ( sin ( x ) , <Exp> ) SEMICOLON?
<Stmt> ::= z = ( sin ( x ) , <Term> ) SEMICOLON?
<Stmt> ::= z = ( sin ( x ) , <Factor> ) SEMICOLON?
<Stmt> ::= z = ( sin ( x ) , <Atom> ) SEMICOLON?
<Stmt> ::= z = ( sin ( x ) , <FUNC> LPAR <ExpSequence> RPAR ) SEMICOLON?
<Stmt> ::= z = ( sin ( x ) , cos LPAR <ExpSequence> RPAR ) SEMICOLON?
<Stmt> ::= z = ( sin ( x ) , cos ( <ExpSequence> ) ) SEMICOLON?
<Stmt> ::= z = ( sin ( x ) , cos ( <Exp> ) ) SEMICOLON?
<Stmt> ::= z = ( sin ( x ) , cos ( <Term> ) ) SEMICOLON?
<Stmt> ::= z = ( sin ( x ) , cos ( <Factor> ) ) SEMICOLON?
<Stmt> ::= z = ( sin ( x ) , cos ( <Atom> ) ) SEMICOLON?
<Stmt> ::= z = ( sin ( x ) , cos ( <ID> ) ) SEMICOLON?
<Stmt> ::= z = ( sin ( x ) , cos ( y ) ) SEMICOLON?
<Stmt> ::= z = ( sin ( x ) , cos ( y ) ) ;


Declarações Complexas:

if (x <= 10) {
    a = 1 + 2 * 3;
    b = a * 2;
} else {
    a = 5 + 7;
    b = a / 2;
}

<Stmt> ::= IF LPAR <RelExp> RPAR LBRACE <StmtList> RBRACE (ELSE LBRACE <StmtList> RBRACE)? SEMICOLON?
<Stmt> ::= if LPAR <RelExp> RPAR LBRACE <StmtList> RBRACE (ELSE LBRACE <StmtList> RBRACE)? SEMICOLON?
<Stmt> ::= if ( <RelExp> ) LBRACE <StmtList> RBRACE (ELSE LBRACE <StmtList> RBRACE)? SEMICOLON?
<Stmt> ::= if ( <Term> GEQ <Term> ) LBRACE <StmtList> RBRACE (ELSE LBRACE <StmtList> RBRACE)? SEMICOLON?
<Stmt> ::= if ( <Factor> GEQ <Term> ) LBRACE <StmtList> RBRACE (ELSE LBRACE <StmtList> RBRACE)? SEMICOLON?
<Stmt> ::= if ( <Atom> GEQ <Term> ) LBRACE <StmtList> RBRACE (ELSE LBRACE <StmtList> RBRACE)? SEMICOLON?
<Stmt> ::= if ( <ID> GEQ <Term> ) LBRACE <StmtList> RBRACE (ELSE LBRACE <StmtList> RBRACE)? SEMICOLON?
<Stmt> ::= if ( x GEQ <Term> ) LBRACE <StmtList> RBRACE (ELSE LBRACE <StmtList> RBRACE)? SEMICOLON?
<Stmt> ::= if ( x <= <Term> ) LBRACE <StmtList> RBRACE (ELSE LBRACE <StmtList> RBRACE)? SEMICOLON?
<Stmt> ::= if ( x <= <Factor> ) LBRACE <StmtList> RBRACE (ELSE LBRACE <StmtList> RBRACE)? SEMICOLON?
<Stmt> ::= if ( x <= <Atom> ) LBRACE <StmtList> RBRACE (ELSE LBRACE <StmtList> RBRACE)? SEMICOLON?
<Stmt> ::= if ( x <= INT ) LBRACE <StmtList> RBRACE (ELSE LBRACE <StmtList> RBRACE)? SEMICOLON?
<Stmt> ::= if ( x <= 10 ) LBRACE <StmtList> RBRACE (ELSE LBRACE <StmtList> RBRACE)? SEMICOLON?
<Stmt> ::= if ( x <= 10 ) { <StmtList> } (ELSE LBRACE <StmtList> RBRACE)? SEMICOLON?
<Stmt> ::= if ( x <= 10 ) { <Stmt> <Stmt> } (ELSE LBRACE <StmtList> RBRACE)? SEMICOLON?
<Stmt> ::= if ( x <= 10 ) { <ID> ASSIGN <Exp> SEMICOLON? <Stmt> } (ELSE LBRACE <StmtList> RBRACE)? SEMICOLON?
<Stmt> ::= if ( x <= 10 ) { a ASSIGN <Exp> SEMICOLON? <Stmt> } (ELSE LBRACE <StmtList> RBRACE)? SEMICOLON?
<Stmt> ::= if ( x <= 10 ) { a = <Exp> SEMICOLON? <Stmt> } (ELSE LBRACE <StmtList> RBRACE)? SEMICOLON?
<Stmt> ::= if ( x <= 10 ) { a = <Term> PLUS <Term> SEMICOLON? <Stmt> } (ELSE LBRACE <StmtList> RBRACE)? SEMICOLON?
<Stmt> ::= if ( x <= 10 ) { a = <Factor> PLUS <Term> SEMICOLON? <Stmt> } (ELSE LBRACE <StmtList> RBRACE)? SEMICOLON?
<Stmt> ::= if ( x <= 10 ) { a = <Atom> PLUS <Term> SEMICOLON? <Stmt> } (ELSE LBRACE <StmtList> RBRACE)? SEMICOLON?
<Stmt> ::= if ( x <= 10 ) { a = INT PLUS <Term> SEMICOLON? <Stmt> } (ELSE LBRACE <StmtList> RBRACE)? SEMICOLON?
<Stmt> ::= if ( x <= 10 ) { a = 1 PLUS <Term> SEMICOLON? <Stmt> } (ELSE LBRACE <StmtList> RBRACE)? SEMICOLON?
<Stmt> ::= if ( x <= 10 ) { a = 1 + <Term> SEMICOLON? <Stmt> } (ELSE LBRACE <StmtList> RBRACE)? SEMICOLON?
<Stmt> ::= if ( x <= 10 ) { a = 1 + <Factor> MUL <Factor> SEMICOLON? <Stmt> } (ELSE LBRACE <StmtList> RBRACE)? SEMICOLON?
<Stmt> ::= if ( x <= 10 ) { a = 1 + <Atom> MUL <Factor> SEMICOLON? <Stmt> } (ELSE LBRACE <StmtList> RBRACE)? SEMICOLON?
<Stmt> ::= if ( x <= 10 ) { a = 1 + INT MUL <Factor> SEMICOLON? <Stmt> } (ELSE LBRACE <StmtList> RBRACE)? SEMICOLON?
<Stmt> ::= if ( x <= 10 ) { a = 1 + 2 MUL <Factor> SEMICOLON? <Stmt> } (ELSE LBRACE <StmtList> RBRACE)? SEMICOLON?
<Stmt> ::= if ( x <= 10 ) { a = 1 + 2 * <Factor> SEMICOLON? <Stmt> } (ELSE LBRACE <StmtList> RBRACE)? SEMICOLON?
<Stmt> ::= if ( x <= 10 ) { a = 1 + 2 * <Atom> SEMICOLON? <Stmt> } (ELSE LBRACE <StmtList> RBRACE)? SEMICOLON?
<Stmt> ::= if ( x <= 10 ) { a = 1 + 2 * INT SEMICOLON? <Stmt> } (ELSE LBRACE <StmtList> RBRACE)? SEMICOLON?
<Stmt> ::= if ( x <= 10 ) { a = 1 + 2 * 3 SEMICOLON? <Stmt> } (ELSE LBRACE <StmtList> RBRACE)? SEMICOLON?
<Stmt> ::= if ( x <= 10 ) { a = 1 + 2 * 3 ; <Stmt> } (ELSE LBRACE <StmtList> RBRACE)? SEMICOLON?
<Stmt> ::= if ( x <= 10 ) { a = 1 + 2 * 3 ; <ID> ASSIGN <Exp> SEMICOLON? } (ELSE LBRACE <StmtList> RBRACE)? SEMICOLON?
<Stmt> ::= if ( x <= 10 ) { a = 1 + 2 * 3 ; b ASSIGN <Exp> SEMICOLON? } (ELSE LBRACE <StmtList> RBRACE)? SEMICOLON?
<Stmt> ::= if ( x <= 10 ) { a = 1 + 2 * 3 ; b = <Exp> SEMICOLON? } (ELSE LBRACE <StmtList> RBRACE)? SEMICOLON?
<Stmt> ::= if ( x <= 10 ) { a = 1 + 2 * 3 ; b = <Term> SEMICOLON? } (ELSE LBRACE <StmtList> RBRACE)? SEMICOLON?
<Stmt> ::= if ( x <= 10 ) { a = 1 + 2 * 3 ; b = <Factor> MUL <Factor> SEMICOLON? } (ELSE LBRACE <StmtList> RBRACE)? SEMICOLON?
<Stmt> ::= if ( x <= 10 ) { a = 1 + 2 * 3 ; b = <Atom> MUL <Factor> SEMICOLON? } (ELSE LBRACE <StmtList> RBRACE)? SEMICOLON?
<Stmt> ::= if ( x <= 10 ) { a = 1 + 2 * 3 ; b = <ID> MUL <Factor> SEMICOLON? } (ELSE LBRACE <StmtList> RBRACE)? SEMICOLON?
<Stmt> ::= if ( x <= 10 ) { a = 1 + 2 * 3 ; b = a MUL <Factor> SEMICOLON? } (ELSE LBRACE <StmtList> RBRACE)? SEMICOLON?
<Stmt> ::= if ( x <= 10 ) { a = 1 + 2 * 3 ; b = a * <Factor> SEMICOLON? } (ELSE LBRACE <StmtList> RBRACE)? SEMICOLON?
<Stmt> ::= if ( x <= 10 ) { a = 1 + 2 * 3 ; b = a * <Atom> SEMICOLON? } (ELSE LBRACE <StmtList> RBRACE)? SEMICOLON?
<Stmt> ::= if ( x <= 10 ) { a = 1 + 2 * 3 ; b = a * INT SEMICOLON? } (ELSE LBRACE <StmtList> RBRACE)? SEMICOLON?
<Stmt> ::= if ( x <= 10 ) { a = 1 + 2 * 3 ; b = a * 2 SEMICOLON? } (ELSE LBRACE <StmtList> RBRACE)? SEMICOLON?
<Stmt> ::= if ( x <= 10 ) { a = 1 + 2 * 3 ; b = a * 2 ; } (ELSE LBRACE <StmtList> RBRACE)? SEMICOLON?
<Stmt> ::= if ( x <= 10 ) { a = 1 + 2 * 3 ; b = a * 2 ; } ELSE LBRACE <StmtList> RBRACE SEMICOLON?
<Stmt> ::= if ( x <= 10 ) { a = 1 + 2 * 3 ; b = a * 2 ; } else LBRACE <StmtList> RBRACE SEMICOLON?
<Stmt> ::= if ( x <= 10 ) { a = 1 + 2 * 3 ; b = a * 2 ; } else { <StmtList> } SEMICOLON?
<Stmt> ::= if ( x <= 10 ) { a = 1 + 2 * 3 ; b = a * 2 ; } else { <Stmt> <Stmt> } SEMICOLON?
<Stmt> ::= if ( x <= 10 ) { a = 1 + 2 * 3 ; b = a * 2 ; } else { <ID> ASSIGN <Exp> SEMICOLON? <Stmt> } SEMICOLON?
<Stmt> ::= if ( x <= 10 ) { a = 1 + 2 * 3 ; b = a * 2 ; } else { a ASSIGN <Exp> SEMICOLON? <Stmt> } SEMICOLON?
<Stmt> ::= if ( x <= 10 ) { a = 1 + 2 * 3 ; b = a * 2 ; } else { a = <Exp> SEMICOLON? <Stmt> } SEMICOLON?
<Stmt> ::= if ( x <= 10 ) { a = 1 + 2 * 3 ; b = a * 2 ; } else { a = <Term> PLUS <Term> SEMICOLON? <Stmt> } SEMICOLON?
<Stmt> ::= if ( x <= 10 ) { a = 1 + 2 * 3 ; b = a * 2 ; } else { a = <Atom> PLUS <Term> SEMICOLON? <Stmt> } SEMICOLON?
<Stmt> ::= if ( x <= 10 ) { a = 1 + 2 * 3 ; b = a * 2 ; } else { a = INT PLUS <Term> SEMICOLON? <Stmt> } SEMICOLON?
<Stmt> ::= if ( x <= 10 ) { a = 1 + 2 * 3 ; b = a * 2 ; } else { a = 5 PLUS <Term> SEMICOLON? <Stmt> } SEMICOLON?
<Stmt> ::= if ( x <= 10 ) { a = 1 + 2 * 3 ; b = a * 2 ; } else { a = 5 + <Term> SEMICOLON? <Stmt> } SEMICOLON?
<Stmt> ::= if ( x <= 10 ) { a = 1 + 2 * 3 ; b = a * 2 ; } else { a = 5 + <Atom> SEMICOLON? <Stmt> } SEMICOLON?
<Stmt> ::= if ( x <= 10 ) { a = 1 + 2 * 3 ; b = a * 2 ; } else { a = 5 + INT SEMICOLON? <Stmt> } SEMICOLON?
<Stmt> ::= if ( x <= 10 ) { a = 1 + 2 * 3 ; b = a * 2 ; } else { a = 5 + 7 SEMICOLON? <Stmt> } SEMICOLON?
<Stmt> ::= if ( x <= 10 ) { a = 1 + 2 * 3 ; b = a * 2 ; } else { a = 5 + 7 ; <Stmt> } SEMICOLON?
<Stmt> ::= if ( x <= 10 ) { a = 1 + 2 * 3 ; b = a * 2 ; } else { a = 5 + 7 ; <ID> ASSIGN <Exp> SEMICOLON? } SEMICOLON?
<Stmt> ::= if ( x <= 10 ) { a = 1 + 2 * 3 ; b = a * 2 ; } else { a = 5 + 7 ; b ASSIGN <Exp> SEMICOLON? } SEMICOLON?
<Stmt> ::= if ( x <= 10 ) { a = 1 + 2 * 3 ; b = a * 2 ; } else { a = 5 + 7 ; b = <Exp> SEMICOLON? } SEMICOLON?
<Stmt> ::= if ( x <= 10 ) { a = 1 + 2 * 3 ; b = a * 2 ; } else { a = 5 + 7 ; b = <Term> SEMICOLON? } SEMICOLON?
<Stmt> ::= if ( x <= 10 ) { a = 1 + 2 * 3 ; b = a * 2 ; } else { a = 5 + 7 ; b = <Factor> DIV <Factor> SEMICOLON? } SEMICOLON?
<Stmt> ::= if ( x <= 10 ) { a = 1 + 2 * 3 ; b = a * 2 ; } else { a = 5 + 7 ; b = <Atom> DIV <Factor> SEMICOLON? } SEMICOLON?
<Stmt> ::= if ( x <= 10 ) { a = 1 + 2 * 3 ; b = a * 2 ; } else { a = 5 + 7 ; b = <ID> DIV <Factor> SEMICOLON? } SEMICOLON?
<Stmt> ::= if ( x <= 10 ) { a = 1 + 2 * 3 ; b = a * 2 ; } else { a = 5 + 7 ; b = a DIV <Factor> SEMICOLON? } SEMICOLON?
<Stmt> ::= if ( x <= 10 ) { a = 1 + 2 * 3 ; b = a * 2 ; } else { a = 5 + 7 ; b = a / <Factor> SEMICOLON? } SEMICOLON?
<Stmt> ::= if ( x <= 10 ) { a = 1 + 2 * 3 ; b = a * 2 ; } else { a = 5 + 7 ; b = a / <Atom> SEMICOLON? } SEMICOLON?
<Stmt> ::= if ( x <= 10 ) { a = 1 + 2 * 3 ; b = a * 2 ; } else { a = 5 + 7 ; b = a / INT SEMICOLON? } SEMICOLON?
<Stmt> ::= if ( x <= 10 ) { a = 1 + 2 * 3 ; b = a * 2 ; } else { a = 5 + 7 ; b = a / 2 SEMICOLON? } SEMICOLON?
<Stmt> ::= if ( x <= 10 ) { a = 1 + 2 * 3 ; b = a * 2 ; } else { a = 5 + 7 ; b = a / 2 ; } SEMICOLON?
<Stmt> ::= if ( x <= 10 ) { a = 1 + 2 * 3 ; b = a * 2 ; } else { a = 5 + 7 ; b = a / 2 ; } 

Atribuição Simples:

x = 10;

<Stmt> ::= <ID> ASSIGN <Exp> SEMICOLON?
<Stmt> ::= x ASSIGN <Exp> SEMICOLON?
<Stmt> ::= x = <Exp> SEMICOLON?
<Stmt> ::= x = <Term> SEMICOLON?
<Stmt> ::= x = <Factor> SEMICOLON?
<Stmt> ::= x = <Atom> SEMICOLON?
<Stmt> ::= x = INT SEMICOLON?
<Stmt> ::= x = 10 SEMICOLON?
<Stmt> ::= x = 10 ;

Chamada de Função Customizada:

y = myFunc(x, 5);

<Stmt> ::= <ID> ASSIGN <Exp> SEMICOLON?
<Stmt> ::= y ASSIGN <Exp> SEMICOLON?
<Stmt> ::= y = <Exp> SEMICOLON?
<Stmt> ::= y = <Term> SEMICOLON?
<Stmt> ::= y = <Factor> SEMICOLON?
<Stmt> ::= y = <Atom> SEMICOLON?
<Stmt> ::= y = <FUNC> LPAR <ExpSequence> RPAR SEMICOLON?
<Stmt> ::= y = <CustomFunc> LPAR <ExpSequence> RPAR SEMICOLON?
<Stmt> ::= y = <ID> LPAR <ExpSequence> RPAR SEMICOLON?
<Stmt> ::= y = myFunc LPAR <ExpSequence> RPAR SEMICOLON?
<Stmt> ::= y = myFunc ( <ExpSequence> ) SEMICOLON?
<Stmt> ::= y = myFunc ( <Exp> COMMA <Exp> ) SEMICOLON?
<Stmt> ::= y = myFunc ( <Term> COMMA <Exp> ) SEMICOLON?
<Stmt> ::= y = myFunc ( <Factor> COMMA <Exp> ) SEMICOLON?
<Stmt> ::= y = myFunc ( <Atom> COMMA <Exp> ) SEMICOLON?
<Stmt> ::= y = myFunc ( <ID> COMMA <Exp> ) SEMICOLON?
<Stmt> ::= y = myFunc ( x COMMA <Exp> ) SEMICOLON?
<Stmt> ::= y = myFunc ( x , <Exp> ) SEMICOLON?
<Stmt> ::= y = myFunc ( x , <Term> ) SEMICOLON?
<Stmt> ::= y = myFunc ( x , <Factor> ) SEMICOLON?
<Stmt> ::= y = myFunc ( x , <Atom> ) SEMICOLON?
<Stmt> ::= y = myFunc ( x , INT ) SEMICOLON?
<Stmt> ::= y = myFunc ( x , 5 ) SEMICOLON?
<Stmt> ::= y = myFunc ( x , 5 ) ;

Combinando Todos os Conceitos:

if (x > 0) {
    a = sin(x) + 5 * 3;
    b = sqrt(a) * cos(x);
} else {
    a = log(10) * 2;
    b = a + 10;
}

<Stmt> ::= IF LPAR <RelExp> RPAR LBRACE <StmtList> RBRACE (ELSE LBRACE <StmtList> RBRACE)? SEMICOLON?
<Stmt> ::= if LPAR <RelExp> RPAR LBRACE <StmtList> RBRACE (ELSE LBRACE <StmtList> RBRACE)? SEMICOLON?
<Stmt> ::= if ( <RelExp> ) LBRACE <StmtList> RBRACE (ELSE LBRACE <StmtList> RBRACE)? SEMICOLON?
<Stmt> ::= if ( <Term> GT <Term> ) LBRACE <StmtList> RBRACE (ELSE LBRACE <StmtList> RBRACE)? SEMICOLON?
<Stmt> ::= if ( <Factor> GT <Term> ) LBRACE <StmtList> RBRACE (ELSE LBRACE <StmtList> RBRACE)? SEMICOLON?
<Stmt> ::= if ( <Atom> GT <Term> ) LBRACE <StmtList> RBRACE (ELSE LBRACE <StmtList> RBRACE)? SEMICOLON?
<Stmt> ::= if ( <ID> GT <Term> ) LBRACE <StmtList> RBRACE (ELSE LBRACE <StmtList> RBRACE)? SEMICOLON?
<Stmt> ::= if ( x GT <Term> ) LBRACE <StmtList> RBRACE (ELSE LBRACE <StmtList> RBRACE)? SEMICOLON?
<Stmt> ::= if ( x > <Term> ) LBRACE <StmtList> RBRACE (ELSE LBRACE <StmtList> RBRACE)? SEMICOLON?
<Stmt> ::= if ( x > <Factor> ) LBRACE <StmtList> RBRACE (ELSE LBRACE <StmtList> RBRACE)? SEMICOLON?
<Stmt> ::= if ( x > <Atom> ) LBRACE <StmtList> RBRACE (ELSE LBRACE <StmtList> RBRACE)? SEMICOLON?
<Stmt> ::= if ( x > INT ) LBRACE <StmtList> RBRACE (ELSE LBRACE <StmtList> RBRACE)? SEMICOLON?
<Stmt> ::= if ( x > 0 ) LBRACE <StmtList> RBRACE (ELSE LBRACE <StmtList> RBRACE)? SEMICOLON?
<Stmt> ::= if ( x > 0 ) { <StmtList> } (ELSE LBRACE <StmtList> RBRACE)? SEMICOLON?
<Stmt> ::= if ( x > 0 ) { <Stmt> <Stmt> } (ELSE LBRACE <StmtList> RBRACE)? SEMICOLON?
<Stmt> ::= if ( x > 0 ) { <ID> ASSIGN <Exp> SEMICOLON? <Stmt> } (ELSE LBRACE <StmtList> RBRACE)? SEMICOLON?
<Stmt> ::= if ( x > 0 ) { a ASSIGN <Exp> SEMICOLON? <Stmt> } (ELSE LBRACE <StmtList> RBRACE)? SEMICOLON?
<Stmt> ::= if ( x > 0 ) { a = <Exp> SEMICOLON? <Stmt> } (ELSE LBRACE <StmtList> RBRACE)? SEMICOLON?
<Stmt> ::= if ( x > 0 ) { a = <Term> PLUS <Term> SEMICOLON? <Stmt> } (ELSE LBRACE <StmtList> RBRACE)? SEMICOLON?
<Stmt> ::= if ( x > 0 ) { a = <Factor> PLUS <Term> SEMICOLON? <Stmt> } (ELSE LBRACE <StmtList> RBRACE)? SEMICOLON?
<Stmt> ::= if ( x > 0 ) { a = <Atom> PLUS <Term> SEMICOLON? <Stmt> } (ELSE LBRACE <StmtList> RBRACE)? SEMICOLON?
<Stmt> ::= if ( x > 0 ) { a = <FUNC> LPAR <ExpSequence> RPAR PLUS <Term> SEMICOLON? <Stmt> } (ELSE LBRACE <StmtList> RBRACE)? SEMICOLON?
<Stmt> ::= if ( x > 0 ) { a = sin LPAR <ExpSequence> RPAR PLUS <Term> SEMICOLON? <Stmt> } (ELSE LBRACE <StmtList> RBRACE)? SEMICOLON?
<Stmt> ::= if ( x > 0 ) { a = sin ( <ExpSequence> ) PLUS <Term> SEMICOLON? <Stmt> } (ELSE LBRACE <StmtList> RBRACE)? SEMICOLON?
<Stmt> ::= if ( x > 0 ) { a = sin ( <Exp> ) PLUS <Term> SEMICOLON? <Stmt> } (ELSE LBRACE <StmtList> RBRACE)? SEMICOLON?
<Stmt> ::= if ( x > 0 ) { a = sin ( <Term> ) PLUS <Term> SEMICOLON? <Stmt> } (ELSE LBRACE <StmtList> RBRACE)? SEMICOLON?
<Stmt> ::= if ( x > 0 ) { a = sin ( <Factor> ) PLUS <Term> SEMICOLON? <Stmt> } (ELSE LBRACE <StmtList> RBRACE)? SEMICOLON?
<Stmt> ::= if ( x > 0 ) { a = sin ( <Atom> ) PLUS <Term> SEMICOLON? <Stmt> } (ELSE LBRACE <StmtList> RBRACE)? SEMICOLON?
<Stmt> ::= if ( x > 0 ) { a = sin ( <ID> ) PLUS <Term> SEMICOLON? <Stmt> } (ELSE LBRACE <StmtList> RBRACE)? SEMICOLON?
<Stmt> ::= if ( x > 0 ) { a = sin ( x ) PLUS <Term> SEMICOLON? <Stmt> } (ELSE LBRACE <StmtList> RBRACE)? SEMICOLON?
<Stmt> ::= if ( x > 0 ) { a = sin ( x ) + <Term> SEMICOLON? <Stmt> } (ELSE LBRACE <StmtList> RBRACE)? SEMICOLON?
<Stmt> ::= if ( x > 0 ) { a = sin ( x ) + <Factor> MUL <Factor> SEMICOLON? <Stmt> } (ELSE LBRACE <StmtList> RBRACE)? SEMICOLON?
<Stmt> ::= if ( x > 0 ) { a = sin ( x ) + <Atom> MUL <Factor> SEMICOLON? <Stmt> } (ELSE LBRACE <StmtList> RBRACE)? SEMICOLON?
<Stmt> ::= if ( x > 0 ) { a = sin ( x ) + INT MUL <Factor> SEMICOLON? <Stmt> } (ELSE LBRACE <StmtList> RBRACE)? SEMICOLON?
<Stmt> ::= if ( x > 0 ) { a = sin ( x ) + 5 MUL <Factor> SEMICOLON? <Stmt> } (ELSE LBRACE <StmtList> RBRACE)? SEMICOLON?
<Stmt> ::= if ( x > 0 ) { a = sin ( x ) + 5 * <Factor> SEMICOLON? <Stmt> } (ELSE LBRACE <StmtList> RBRACE)? SEMICOLON?
<Stmt> ::= if ( x > 0 ) { a = sin ( x ) + 5 * <Atom> SEMICOLON? <Stmt> } (ELSE LBRACE <StmtList> RBRACE)? SEMICOLON?
<Stmt> ::= if ( x > 0 ) { a = sin ( x ) + 5 * INT SEMICOLON? <Stmt> } (ELSE LBRACE <StmtList> RBRACE)? SEMICOLON?
<Stmt> ::= if ( x > 0 ) { a = sin ( x ) + 5 * 3 SEMICOLON? <Stmt> } (ELSE LBRACE <StmtList> RBRACE)? SEMICOLON?
<Stmt> ::= if ( x > 0 ) { a = sin ( x ) + 5 * 3 ; <Stmt> } (ELSE LBRACE <StmtList> RBRACE)? SEMICOLON?
<Stmt> ::= if ( x > 0 ) { a = sin ( x ) + 5 * 3 ; <ID> ASSIGN <Exp> SEMICOLON? } (ELSE LBRACE <StmtList> RBRACE)? SEMICOLON?
<Stmt> ::= if ( x > 0 ) { a = sin ( x ) + 5 * 3 ; b ASSIGN <Exp> SEMICOLON? } (ELSE LBRACE <StmtList> RBRACE)? SEMICOLON?
<Stmt> ::= if ( x > 0 ) { a = sin ( x ) + 5 * 3 ; b = <Exp> SEMICOLON? } (ELSE LBRACE <StmtList> RBRACE)? SEMICOLON?
<Stmt> ::= if ( x > 0 ) { a = sin ( x ) + 5 * 3 ; b = <Term> SEMICOLON? } (ELSE LBRACE <StmtList> RBRACE)? SEMICOLON?
<Stmt> ::= if ( x > 0 ) { a = sin ( x ) + 5 * 3 ; b = <Factor> MUL <Factor> SEMICOLON? } (ELSE LBRACE <StmtList> RBRACE)? SEMICOLON?
<Stmt> ::= if ( x > 0 ) { a = sin ( x ) + 5 * 3 ; b = <Atom> MUL <Factor> SEMICOLON? } (ELSE LBRACE <StmtList> RBRACE)? SEMICOLON?
<Stmt> ::= if ( x > 0 ) { a = sin ( x ) + 5 * 3 ; b = <FUNC> LPAR <ExpSequence> RPAR MUL <Factor> SEMICOLON? } (ELSE LBRACE <StmtList> RBRACE)? SEMICOLON?
<Stmt> ::= if ( x > 0 ) { a = sin ( x ) + 5 * 3 ; b = sqrt LPAR <ExpSequence> RPAR MUL <Factor> SEMICOLON? } (ELSE LBRACE <StmtList> RBRACE)? SEMICOLON?
<Stmt> ::= if ( x > 0 ) { a = sin ( x ) + 5 * 3 ; b = sqrt ( <ExpSequence> ) MUL <Factor> SEMICOLON? } (ELSE LBRACE <StmtList> RBRACE)? SEMICOLON?
<Stmt> ::= if ( x > 0 ) { a = sin ( x ) + 5 * 3 ; b = sqrt ( <Exp> ) MUL <Factor> SEMICOLON? } (ELSE LBRACE <StmtList> RBRACE)? SEMICOLON?
<Stmt> ::= if ( x > 0 ) { a = sin ( x ) + 5 * 3 ; b = sqrt ( <Term> ) MUL <Factor> SEMICOLON? } (ELSE LBRACE <StmtList> RBRACE)? SEMICOLON?
<Stmt> ::= if ( x > 0 ) { a = sin ( x ) + 5 * 3 ; b = sqrt ( <Factor> ) MUL <Factor> SEMICOLON? } (ELSE LBRACE <StmtList> RBRACE)? SEMICOLON?
<Stmt> ::= if ( x > 0 ) { a = sin ( x ) + 5 * 3 ; b = sqrt ( <Atom> ) MUL <Factor> SEMICOLON? } (ELSE LBRACE <StmtList> RBRACE)? SEMICOLON?
<Stmt> ::= if ( x > 0 ) { a = sin ( x ) + 5 * 3 ; b = sqrt ( <ID> ) MUL <Factor> SEMICOLON? } (ELSE LBRACE <StmtList> RBRACE)? SEMICOLON?
<Stmt> ::= if ( x > 0 ) { a = sin ( x ) + 5 * 3 ; b = sqrt ( a ) MUL <Factor> SEMICOLON? } (ELSE LBRACE <StmtList> RBRACE)? SEMICOLON?
<Stmt> ::= if ( x > 0 ) { a = sin ( x ) + 5 * 3 ; b = sqrt ( a ) * <Factor> SEMICOLON? } (ELSE LBRACE <StmtList> RBRACE)? SEMICOLON?
<Stmt> ::= if ( x > 0 ) { a = sin ( x ) + 5 * 3 ; b = sqrt ( a ) * <Atom> SEMICOLON? } (ELSE LBRACE <StmtList> RBRACE)? SEMICOLON?
<Stmt> ::= if ( x > 0 ) { a = sin ( x ) + 5 * 3 ; b = sqrt ( a ) * <FUNC> LPAR <ExpSequence> RPAR SEMICOLON? } (ELSE LBRACE <StmtList> RBRACE)? SEMICOLON?
<Stmt> ::= if ( x > 0 ) { a = sin ( x ) + 5 * 3 ; b = sqrt ( a ) * cos LPAR <ExpSequence> RPAR SEMICOLON? } (ELSE LBRACE <StmtList> RBRACE)? SEMICOLON?
<Stmt> ::= if ( x > 0 ) { a = sin ( x ) + 5 * 3 ; b = sqrt ( a ) * cos ( <ExpSequence> ) SEMICOLON? } (ELSE LBRACE <StmtList> RBRACE)? SEMICOLON?
<Stmt> ::= if ( x > 0 ) { a = sin ( x ) + 5 * 3 ; b = sqrt ( a ) * cos ( <Exp> ) SEMICOLON? } (ELSE LBRACE <StmtList> RBRACE)? SEMICOLON?
<Stmt> ::= if ( x > 0 ) { a = sin ( x ) + 5 * 3 ; b = sqrt ( a ) * cos ( <Term> ) SEMICOLON? } (ELSE LBRACE <StmtList> RBRACE)? SEMICOLON?
<Stmt> ::= if ( x > 0 ) { a = sin ( x ) + 5 * 3 ; b = sqrt ( a ) * cos ( <Factor> ) SEMICOLON? } (ELSE LBRACE <StmtList> RBRACE)? SEMICOLON?
<Stmt> ::= if ( x > 0 ) { a = sin ( x ) + 5 * 3 ; b = sqrt ( a ) * cos ( <Atom> ) SEMICOLON? } (ELSE LBRACE <StmtList> RBRACE)? SEMICOLON?
<Stmt> ::= if ( x > 0 ) { a = sin ( x ) + 5 * 3 ; b = sqrt ( a ) * cos ( <ID> ) SEMICOLON? } (ELSE LBRACE <StmtList> RBRACE)? SEMICOLON?
<Stmt> ::= if ( x > 0 ) { a = sin ( x ) + 5 * 3 ; b = sqrt ( a ) * cos ( x ) SEMICOLON? } (ELSE LBRACE <StmtList> RBRACE)? SEMICOLON?
<Stmt> ::= if ( x > 0 ) { a = sin ( x ) + 5 * 3 ; b = sqrt ( a ) * cos ( x ) ; } (ELSE LBRACE <StmtList> RBRACE)? SEMICOLON?
<Stmt> ::= if ( x > 0 ) { a = sin ( x ) + 5 * 3 ; b = sqrt ( a ) * cos ( x ) ; } ELSE LBRACE <StmtList> RBRACE SEMICOLON?
<Stmt> ::= if ( x > 0 ) { a = sin ( x ) + 5 * 3 ; b = sqrt ( a ) * cos ( x ) ; } else LBRACE <StmtList> RBRACE SEMICOLON?
<Stmt> ::= if ( x > 0 ) { a = sin ( x ) + 5 * 3 ; b = sqrt ( a ) * cos ( x ) ; } else { <StmtList> } SEMICOLON?
<Stmt> ::= if ( x > 0 ) { a = sin ( x ) + 5 * 3 ; b = sqrt ( a ) * cos ( x ) ; } else { <Stmt> <Stmt> } SEMICOLON?
<Stmt> ::= if ( x > 0 ) { a = sin ( x ) + 5 * 3 ; b = sqrt ( a ) * cos ( x ) ; } else { <ID> ASSIGN <Exp> SEMICOLON? <Stmt> } SEMICOLON?
<Stmt> ::= if ( x > 0 ) { a = sin ( x ) + 5 * 3 ; b = sqrt ( a ) * cos ( x ) ; } else { a ASSIGN <Exp> SEMICOLON? <Stmt> } SEMICOLON?
<Stmt> ::= if ( x > 0 ) { a = sin ( x ) + 5 * 3 ; b = sqrt ( a ) * cos ( x ) ; } else { a = <Exp> SEMICOLON? <Stmt> } SEMICOLON?
<Stmt> ::= if ( x > 0 ) { a = sin ( x ) + 5 * 3 ; b = sqrt ( a ) * cos ( x ) ; } else { a = <Term> SEMICOLON? <Stmt> } SEMICOLON?
<Stmt> ::= if ( x > 0 ) { a = sin ( x ) + 5 * 3 ; b = sqrt ( a ) * cos ( x ) ; } else { a = <Factor> MUL <Factor> SEMICOLON? <Stmt> } SEMICOLON?
<Stmt> ::= if ( x > 0 ) { a = sin ( x ) + 5 * 3 ; b = sqrt ( a ) * cos ( x ) ; } else { a = <Atom> MUL <Factor> SEMICOLON? <Stmt> } SEMICOLON?
<Stmt> ::= if ( x > 0 ) { a = sin ( x ) + 5 * 3 ; b = sqrt ( a ) * cos ( x ) ; } else { a = <FUNC> LPAR <ExpSequence> RPAR MUL <Factor> SEMICOLON? <Stmt> } SEMICOLON?
<Stmt> ::= if ( x > 0 ) { a = sin ( x ) + 5 * 3 ; b = sqrt ( a ) * cos ( x ) ; } else { a = log LPAR <ExpSequence> RPAR MUL <Factor> SEMICOLON? <Stmt> } SEMICOLON?
<Stmt> ::= if ( x > 0 ) { a = sin ( x ) + 5 * 3 ; b = sqrt ( a ) * cos ( x ) ; } else { a = log ( <ExpSequence> ) MUL <Factor> SEMICOLON? <Stmt> } SEMICOLON?
<Stmt> ::= if ( x > 0 ) { a = sin ( x ) + 5 * 3 ; b = sqrt ( a ) * cos ( x ) ; } else { a = log ( <Exp> ) MUL <Factor> SEMICOLON? <Stmt> } SEMICOLON?
<Stmt> ::= if ( x > 0 ) { a = sin ( x ) + 5 * 3 ; b = sqrt ( a ) * cos ( x ) ; } else { a = log ( <Term> ) MUL <Factor> SEMICOLON? <Stmt> } SEMICOLON?
<Stmt> ::= if ( x > 0 ) { a = sin ( x ) + 5 * 3 ; b = sqrt ( a ) * cos ( x ) ; } else { a = log ( <Factor> ) MUL <Factor> SEMICOLON? <Stmt> } SEMICOLON?
<Stmt> ::= if ( x > 0 ) { a = sin ( x ) + 5 * 3 ; b = sqrt ( a ) * cos ( x ) ; } else { a = log ( <Atom> ) MUL <Factor> SEMICOLON? <Stmt> } SEMICOLON?
<Stmt> ::= if ( x > 0 ) { a = sin ( x ) + 5 * 3 ; b = sqrt ( a ) * cos ( x ) ; } else { a = log ( INT ) MUL <Factor> SEMICOLON? <Stmt> } SEMICOLON?
<Stmt> ::= if ( x > 0 ) { a = sin ( x ) + 5 * 3 ; b = sqrt ( a ) * cos ( x ) ; } else { a = log ( 10 ) MUL <Factor> SEMICOLON? <Stmt> } SEMICOLON?
<Stmt> ::= if ( x > 0 ) { a = sin ( x ) + 5 * 3 ; b = sqrt ( a ) * cos ( x ) ; } else { a = log ( 10 ) * <Factor> SEMICOLON? <Stmt> } SEMICOLON?
<Stmt> ::= if ( x > 0 ) { a = sin ( x ) + 5 * 3 ; b = sqrt ( a ) * cos ( x ) ; } else { a = log ( 10 ) * <Atom> SEMICOLON? <Stmt> } SEMICOLON?
<Stmt> ::= if ( x > 0 ) { a = sin ( x ) + 5 * 3 ; b = sqrt ( a ) * cos ( x ) ; } else { a = log ( 10 ) * INT SEMICOLON? <Stmt> } SEMICOLON?
<Stmt> ::= if ( x > 0 ) { a = sin ( x ) + 5 * 3 ; b = sqrt ( a ) * cos ( x ) ; } else { a = log ( 10 ) * 2 SEMICOLON? <Stmt> } SEMICOLON?
<Stmt> ::= if ( x > 0 ) { a = sin ( x ) + 5 * 3 ; b = sqrt ( a ) * cos ( x ) ; } else { a = log ( 10 ) * 2 ; <Stmt> } SEMICOLON?
<Stmt> ::= if ( x > 0 ) { a = sin ( x ) + 5 * 3 ; b = sqrt ( a ) * cos ( x ) ; } else { a = log ( 10 ) * 2 ; <ID> ASSIGN <Exp> SEMICOLON? } SEMICOLON?
<Stmt> ::= if ( x > 0 ) { a = sin ( x ) + 5 * 3 ; b = sqrt ( a ) * cos ( x ) ; } else { a = log ( 10 ) * 2 ; b ASSIGN <Exp> SEMICOLON? } SEMICOLON?
<Stmt> ::= if ( x > 0 ) { a = sin ( x ) + 5 * 3 ; b = sqrt ( a ) * cos ( x ) ; } else { a = log ( 10 ) * 2 ; b = <Exp> SEMICOLON? } SEMICOLON?
<Stmt> ::= if ( x > 0 ) { a = sin ( x ) + 5 * 3 ; b = sqrt ( a ) * cos ( x ) ; } else { a = log ( 10 ) * 2 ; b = <Term> PLUS <Term> SEMICOLON? } SEMICOLON?
<Stmt> ::= if ( x > 0 ) { a = sin ( x ) + 5 * 3 ; b = sqrt ( a ) * cos ( x ) ; } else { a = log ( 10 ) * 2 ; b = <Factor> PLUS <Term> SEMICOLON? } SEMICOLON?
<Stmt> ::= if ( x > 0 ) { a = sin ( x ) + 5 * 3 ; b = sqrt ( a ) * cos ( x ) ; } else { a = log ( 10 ) * 2 ; b = <Atom> PLUS <Term> SEMICOLON? } SEMICOLON?
<Stmt> ::= if ( x > 0 ) { a = sin ( x ) + 5 * 3 ; b = sqrt ( a ) * cos ( x ) ; } else { a = log ( 10 ) * 2 ; b = <ID> PLUS <Term> SEMICOLON? } SEMICOLON?
<Stmt> ::= if ( x > 0 ) { a = sin ( x ) + 5 * 3 ; b = sqrt ( a ) * cos ( x ) ; } else { a = log ( 10 ) * 2 ; b = a PLUS <Term> SEMICOLON? } SEMICOLON?
<Stmt> ::= if ( x > 0 ) { a = sin ( x ) + 5 * 3 ; b = sqrt ( a ) * cos ( x ) ; } else { a = log ( 10 ) * 2 ; b = a + <Term> SEMICOLON? } SEMICOLON?
<Stmt> ::= if ( x > 0 ) { a = sin ( x ) + 5 * 3 ; b = sqrt ( a ) * cos ( x ) ; } else { a = log ( 10 ) * 2 ; b = a + <Factor> SEMICOLON? } SEMICOLON?
<Stmt> ::= if ( x > 0 ) { a = sin ( x ) + 5 * 3 ; b = sqrt ( a ) * cos ( x ) ; } else { a = log ( 10 ) * 2 ; b = a + <Atom> SEMICOLON? } SEMICOLON?
<Stmt> ::= if ( x > 0 ) { a = sin ( x ) + 5 * 3 ; b = sqrt ( a ) * cos ( x ) ; } else { a = log ( 10 ) * 2 ; b = a + INT SEMICOLON? } SEMICOLON?
<Stmt> ::= if ( x > 0 ) { a = sin ( x ) + 5 * 3 ; b = sqrt ( a ) * cos ( x ) ; } else { a = log ( 10 ) * 2 ; b = a + 10 SEMICOLON? } SEMICOLON?
<Stmt> ::= if ( x > 0 ) { a = sin ( x ) + 5 * 3 ; b = sqrt ( a ) * cos ( x ) ; } else { a = log ( 10 ) * 2 ; b = a + 10 ; } SEMICOLON?
<Stmt> ::= if ( x > 0 ) { a = sin ( x ) + 5 * 3 ; b = sqrt ( a ) * cos ( x ) ; } else { a = log ( 10 ) * 2 ; b = a + 10 ; } 